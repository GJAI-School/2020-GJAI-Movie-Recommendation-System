from django.shortcuts import render

# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P3yyTwwpLgjeyFYfshhOcM-eyNs0mr1W
"""

def home(request):

    return render(request, 'home.html')



def result(request):

    import pandas as pd
    import numpy as np
    import sys

    sys.stdout.flush()
    movies_data = pd.read_csv("./data/movie_data_preprocessing2.csv")
    # movies_data = movies_data.iloc[:6000]
    movies_data.columns = ['movie_id', 'title', 'star', 'movie_rating', 'genre', 'director', 'actors', 'summary']

    movies_data['title'] = movies_data['title'].str.replace("[^\w]", "")
    movies_data['director'] = movies_data['director'].replace(np.nan, " ")
    movies_data['actors'] = movies_data['actors'].replace(np.nan, " ")
    movies_data['genre'] = movies_data['genre'].replace(np.nan, " ")
    movies_data['movie_rating'] = movies_data['movie_rating'].replace(np.nan, " ")
    movies_data['summary'] = movies_data['summary'].replace(np.nan, " ")


    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.metrics.pairwise import cosine_similarity


    # def get_categories():
    #     categories_lst= ['title', 'genre', 'director', 'actors']

    #     categories = list(map(str, input("원하는 카테고리를 고르시오 (title, genre, director, actors) :").split()))
    #     for categorie in categories:
    #         if categorie not in categories_lst:
    #             print("잘못된 카테고리를 입력하였습니다.", end="")
    #             get_categories()
    #     else:
    #         return categories

        
    def get_tfidf_matrix(dataset, categories):
        tfidf_vec = TfidfVectorizer(ngram_range=(1, 2))
        
        similar_index_dic = {categorie:None for categorie in categories}
        
        for categorie in categories:
            tfidf_matrix = tfidf_vec.fit_transform(dataset['summary'])
            genres_similarity = cosine_similarity(tfidf_matrix, tfidf_matrix)
            similar_index = np.argsort(-genres_similarity)
            similar_index_dic[categorie] = similar_index
        
        return similar_index_dic


    def find_similar_moive(movies_data, new_user_input):
        movie_index_list = []
        
        for categorie, value in new_user_input.items():
            movie_index = movies_data[movies_data[str(categorie)]==value].index.values
            movie_index_list.append(movie_index)
        
        return movie_index


    def find_info(movies_data, categorie, value):
        lengh = movies_data[categorie].shape[0]
        
        find_lst = []
        if categorie == 'title':
            return movies_data['title']==value
        else:
            for i in range(lengh):
                if value in movies_data[categorie][i].split():
                    find_lst.append(True)
                else:
                    find_lst.append(False)
            return find_lst


    def get_movie_index_lst(movies_data, new_user_input):
        movie_index_lst = []

        for categorie, value in new_user_input.items():
            b = find_info(movies_data, categorie, value)
            movie_index = movies_data[b].index.values
            movie_index_lst.append(movie_index)
        return movie_index_lst


    def match_idx(movie_index_lst):
        match_lst = []

        if len(movie_index_lst) == 1:
            return movie_index_lst[0]
        
        elif len(movie_index_lst) == 2:   
            for i in movie_index_lst[0]:
                for j in movie_index_lst[1]:
                    if i == j :
                        match_lst.append(i)
                        break
            return match_lst
        
        elif len(movie_index_lst) == 3:
            for i in movie_index_lst[0]:
                for j in movie_index_lst[1]:
                    for k in movie_index_lst[2]:
                        if i == j == k:
                            match_lst.append(i)
                            break
            return match_lst
        else:
            print("입력하신 정보에 의해 추천되는 영화가 없습니다.")
            
    def seach_similar_movie(movies_data, similar_index_dic, match_lst, categories):
        if len(categories) == 1:
            similar_movies = similar_index_dic[categories[0]][match_lst, : 10]
            similar_movies_index = similar_movies.reshape(-1)
            return movies_data.iloc[similar_movies_index]
        else:
            similar_movies = similar_index_dic[categories[0]][match_lst, : 10].T
            similar_movies_index = similar_movies.reshape(-1)
            return movies_data.iloc[similar_movies_index]

    categories = request.POST['data']
    categories2 = request.POST['data2']

    categories = categories.split()
    categories2 = categories2.split()



    new_user_input = {key:value for (key, value)in zip(categories, categories2) }

    print("검색중.....")
    similar_index_dic = get_tfidf_matrix(movies_data, categories)
    movie_index_lst = get_movie_index_lst(movies_data, new_user_input)
    match_lst = match_idx(movie_index_lst)
    seach_similar_movie(movies_data, similar_index_dic, match_lst, categories)[:10]

    data = seach_similar_movie(movies_data, similar_index_dic, match_lst, categories)[:10]

    context ={
        'data': data,
        'link' : 'https://movie.naver.com/movie/bi/mi/basic.nhn?code='
    }

    return render(request, 'result.html', context)








